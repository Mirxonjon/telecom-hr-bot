import TelegramBot from 'node-telegram-bot-api';
import fetch from 'node-fetch'
import { read, write } from './utils/FS.js';
import * as dotenv from 'dotenv'

dotenv.config()
const token = process.env.BOT_TOKEN 

const bot  = new TelegramBot(token, {
    polling: true
  })

  bot.on("error", (e) => console.log(e ))
const url = 'https://marketing.uz/brend-goda-2021/uploads/works/covers/3367084b181cb4ff62d8c85bebe1958b.jpg'

  bot.onText(/\/start/,async msg => {

    const chatId = msg.chat.id
   await bot.sendPhoto(chatId, url  , {parse_mode: 'HTML',
      caption : `
          <b>  –û–±—ä—è–≤–ª—è–µ—Ç—Å—è –≤–∞–∫–∞–Ω—Å–∏—è –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å
¬´–û–ø–µ—Ä–∞—Ç–æ—Ä Call-–¶–µ–Ω—Ç—Ä–∞¬ª –≤ –°–ª—É–∂–±–µ –ø–æ
–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—é —É—Å–ª—É–≥ –∞—É—Ç—Å–æ—Ä—Å–∏–Ω–≥–∞! </b>

<b>–û—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ:</b>
‚úÖ –ù–∞–≤—ã–∫–∏ —Ä–∞–±–æ—Ç—ã –Ω–∞ –ü–ö:  Windows, MS Office, –æ—Ä–≥—Ç–µ—Ö–Ω–∏–∫–æ–π;
‚úÖ –ë—ã—Å—Ç—Ä–∞—è –ø–µ—á–∞—Ç—å –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ;
‚úÖ –°–≤–æ–±–æ–¥–Ω–æ–µ –≤–ª–∞–¥–µ–Ω–∏–µ —Ä—É—Å—Å–∫–∏–º –∏ —É–∑–±–µ–∫—Å–∫–∏–º —è–∑—ã–∫–æ–º;
(–≥—Ä–∞–º–º–∞—Ç–∏–∫–∞ –∏ —É—Å—Ç–Ω–∞—è —Ä–µ—á—å);
‚úÖ –í–æ–∑—Ä–∞—Å—Ç: –æ—Ç 18 –¥–æ 35 –ª–µ—Ç;
üïó –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã 5/2; 
üí∏ –ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞: ~3 600 000;

<b>–£–¥–æ–±—Å—Ç–≤–∞:</b>
‚úÖ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –≤ –æ—Ñ–∏—Å–µ;
‚úÖ –ù–∞–¥–±–∞–≤–∫–∏;
‚úÖ –î—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–ª–ª–µ–∫—Ç–∏–≤;
üìç –ê–¥—Ä–µ—Å: –≥.–¢–∞—à–∫–µ–Ω—Ç, –ú–∏—Ä–∞–±–∞–¥—Å–∫–∏–π —Ä-–æ–Ω, —É–ª.–ù—É–∫—É—Å 87. –û—Ä–∏–µ–Ω—Ç–∏—Ä
–ø–æ—Å–æ–ª—å—Å—Ç–≤–∞ –†–æ—Å—Å–∏–∏;
      `
    }  ,
     )


   await bot.sendMessage(chatId ,  `Assalomu aleykum ${msg.from.first_name} bizning botga hush kelisbsiz , Til Tanlang`,{
    reply_markup: {
        keyboard : [[ 'üá∑üá∫  –†—É—Å—Å–∫–∏–π', `üá∫üáø O'zbekcha`]],
        resize_keyboard : true
    }
    } )
  })

    bot.on('message' , async msg => {
      const ChatId = msg.chat.id 

      if(msg.text == 'üá∑üá∫  –†—É—Å—Å–∫–∏–π' ) {

        const users = await read('users.json')

        const findUser = await users.find(e => e.id == msg.from.id)


        if(findUser){
          findUser.lang = 'ru' || findUser.lang
          const NewUser = await write('users.json' , users)
          if(NewUser){
            bot.sendMessage( ChatId , 'üíº –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –í–∞—Å –≤–∞–∫–∞–Ω—Å–∏—é' ,{
              reply_markup:{
                keyboard: [['Call-–¶–µ–Ω—Ç—Ä' ,'üá∑üá∫/üá∫üáø Tilni o\'zgartirish'] ],
                resize_keyboard: true,
                one_time_keyboard : true
              }
            })
    
          }
        } else {  
          users.push({
            id: msg.from.id,
            lang: 'ru'
          })
          const NewUser = await write('users.json' , users)
          if(NewUser){
            bot.sendMessage( ChatId , 'üíº –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –í–∞—Å –≤–∞–∫–∞–Ω—Å–∏—é' ,{
              reply_markup:{
                keyboard: [['Call-Centr' ,'üá∑üá∫/üá∫üáø Tilni o\'zgartirish']],
                resize_keyboard: true,
                one_time_keyboard : true
              }
            })
    
          }
        }
     }

    if(msg.text == `üá∫üáø O'zbekcha` ) {
      const users = await read('users.json')
      const findUser = users.find(e => e.id == msg.from.id)
      if(findUser){
        findUser.lang = 'uz' || findUser.lang
        const NewUser = await write('users.json' , users)
      if(NewUser) {

        await  bot.sendMessage( ChatId , 'üíº Sizni qiziqtirgan vakansiyani tanlang' ,{
          reply_markup:{
            keyboard: [[`Qo'ng'iroq markazi mutaxassisi` ,'üá∑üá∫/üá∫üáø Tilni o\'zgartirish']],
            resize_keyboard: true
          }
        })
      }
        
      } else {
        users.push({
          id: msg.from.id,
          lang: 'uz'
        })
        const NewUser = await write('users.json' , users)
      if(NewUser) {

        await  bot.sendMessage( ChatId , 'üíº Sizni qiziqtirgan vakansiyani tanlang' ,{
          reply_markup:{
            keyboard: [[`Qo'ng'iroq markazi mutaxassisi`]],
            resize_keyboard: true
          }
        })
      }
      }
    } 
    
    if(msg.text == '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å", —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ' || msg.text  ==   'Barcha tafsilotlarni tasdiqlash uchun "Yuborish" tugmasini bosing'){
        const findUser = await read('users.json').find(e=> e.id == msg.from.id)
      console.log(findUser.name.toUpperCase());
        const sentData = await fetch('http://192.168.0.167:3445/api/v1/users/create' ,{
          method :'POST',
          headers: { 'Content-Type': 'application/json' } ,
          body: JSON.stringify({
              "id": `${findUser.id}` ,
              "name": await findUser.name.toUpperCase(),
              "was_born": findUser.wasborn,
              "phone": findUser.nomer,
              "address": findUser.address,
              "student": findUser.student == '‚ùå–ù–ï–¢' ? 'false' : 'true',
              "lang_ru": findUser.lang_ru,
              "lang_uz": findUser.lang_uz,
              "lang_en": findUser.lang_en,
          }),
        }).then(res => {
          if( res.status == 201) {
            bot.sendMessage(msg.chat.id ,findUser.lang == 'uz' ? `Kompaniyamizga bo'lgan qiziqishingiz uchun tashakkur, siz anketangizni muvaffaqiyatli to'ldirdingiz` : `–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø—Ä–æ—è–≤–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏, –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É` ,{
            reply_markup : {
              keyboard:  findUser.lang == 'uz' ? [[`Qo'ng'iroq markazi mutaxassisi` ,'üá∑üá∫/üá∫üáø Tilni o\'zgartirish']] :[ ['Call-–¶–µ–Ω—Ç—Ä' ,'üá∑üá∫/üá∫üáø Tilni o\'zgartirish'] ],
              resize_keyboard: true ,
              one_time_keyboard :true
            }
            })  
          }
        })
        .catch(e => console.log(e))

      
       }
       if(msg.text == `üá∑üá∫/üá∫üáø Tilni o'zgartirish`) {

        await bot.sendMessage(msg.chat.id ,  `üá∑üá∫/üá∫üáø Tilni o'zgartirish`,{
          reply_markup: {
              keyboard : [[ 'üá∑üá∫  –†—É—Å—Å–∫–∏–π', `üá∫üáø O'zbekcha`]],
              resize_keyboard : true
          }
          } )
      }
    })
    
    
      bot.on('message' , async msg =>  {
        const ChatId = msg.chat.id 
        if(msg.text == 'Call-–¶–µ–Ω—Ç—Ä' || msg.text == `Qo'ng'iroq markazi mutaxassisi`) {
          const users = await read('users.json')
          const findUser = users.find(e => e.id == msg.from.id)
       
          const dataLang = findUser?.lang
          const sentName = await   bot.sendMessage( ChatId ,
            dataLang == 'uz' ?`üë§ To ªliq ismingizni kiriting (masalan: Ivanov Ivan Ivanovich)`: 'üë§–í–≤–µ–¥–∏—Ç–µ –§–ò–û  (–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á)' ,{
            reply_markup: {
              force_reply : true
            }
           } , ) 
             

              bot.onReplyToMessage(sentName.chat.id, sentName.message_id, async namee => {
                const userDate = await bot.sendMessage(sentName.chat.id,
                  dataLang == 'uz' ?`üìÖ Tug'ilgan kuningizni kiriting (masalan, dd.MM.yyyy):` : 'üìÖ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è (–ø—Ä–∏–º–µ—Ä, –¥–¥.–º–º.–≥–≥–≥–≥):', {
                  reply_markup: {
                    force_reply: true
                  }
                })

                bot.onReplyToMessage(userDate.chat.id , userDate.message_id , async date => {
     
                  const userNomer =  await bot.sendMessage(namee.chat.id,
                    dataLang == 'uz' ?`üì± Telefon raqamingizni kiriting (masalan: +998XXXXXXXXX):` : '–£–∫–∞–∂–∏—Ç–µ –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì±  –ø—Ä–∏–º–µ—Ä: +998XXXXXXXXX', {
                        reply_markup: {
                          force_reply: true,
                        },
                      })
                    
                  bot.onReplyToMessage(userNomer.chat.id , userNomer.message_id , async nomer => {
                    const addressUser = await bot.sendMessage(nomer.chat.id ,
                      dataLang == 'uz' ?`üè† Yashash manzili (shahar, tuman, ko'cha/blok)` : 'üè† –ê–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è (–≥–æ—Ä–æ–¥, —Ä–∞–π–æ–Ω, —É–ª–∏—Ü–∞/–∫–≤–∞—Ä—Ç–∞–ª)' , {
                        reply_markup :{
                          force_reply :true
                        }
                    })
                    bot.onReplyToMessage(addressUser.chat.id , addressUser.message_id , async address => {
                      
                    const userStudent =  await bot.sendMessage(address.chat.id,
                      dataLang == 'uz' ? `Siz talabamisiz?` : 'üë®‚Äçüéì–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å —Å—Ç—É–¥–µ–Ω—Ç–æ–º?', {
                        reply_markup:  {
                          
                          inline_keyboard: [
                            [{
                                text:   "‚úÖ–î–ê",
                                callback_data: `student::‚úÖ–î–ê`
                              },
                              {
                                text: "‚ùå–ù–ï–¢",
                                callback_data: `student::‚ùå–ù–ï–¢::`
                              }
                            ],
                          ],
                          one_time_keyboard: true,
                        },
                      })
                      if(userStudent) {
                        findUser.name = namee.text
                        findUser.wasborn = date.text
                        findUser.nomer = nomer.text
                        findUser.address = address.text
                        findUser.job = dataLang == 'uz' ? `Qo'ng'iroq markazi mutaxassisi` : 'CALL-CENTR'
  
                
                        await write('users.json' , users)
                      }
                      
                    })
                      

                  } )


                  
                })

              })
      } 
    
    })

  bot.on('callback_query' , async mesage_Callback => {

    if(mesage_Callback.data.split('::')[0] == 'student'){
      const users = await read('users.json')
      const findUser = users.find(e => e.id ==mesage_Callback.from.id)
      findUser.student =  mesage_Callback.data.split('::')[1]
    
      await write('users.json' , users)


      await bot.sendMessage(mesage_Callback.message.chat.id,
        findUser.lang == 'uz' ? `üá∫üáø O'zbek tilini darajangiz qanday? ` : 'üá∫üáø –ö–∞–∫–æ–π —É –≤–∞—Å —É—Ä–æ–≤–µ–Ω—å —É–∑–±–µ–∫—Å–∫–æ–≥–æ —è–∑—ã–∫–∞?', {
        reply_markup:  {
          inline_keyboard: [
            [{
                text:  "–ù–∞—á–∞–ª—å–Ω—ã–π",
                callback_data: `lang_uz::–ù–∞—á–∞–ª—å–Ω—ã–π`
              },
              {
                text: "–°—Ä–µ–¥–Ω–∏–π",
                callback_data: `lang_uz::–°—Ä–µ–¥–Ω–∏–π`
              },
            ],
            [
              {
                text: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π",
                callback_data: `lang_uz::–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π`
              },
              {
                text: "–°–≤–æ–±–æ–¥–Ω—ã–π",
                callback_data: `lang_uz::–°–≤–æ–±–æ–¥–Ω—ã–π`
              }
            ]
          ],
          one_time_keyboard: true,
          resize_keyboard: true
          
        },
      })
    }

    if(mesage_Callback.data.split('::')[0] == 'lang_uz'){
      const users = await read('users.json')
      const findUser = users.find(e => e.id ==mesage_Callback.from.id)
      findUser.lang_uz =  mesage_Callback?.data?.split('::')[1]

      await write('users.json' , users)

      await bot.sendMessage(mesage_Callback.message.chat.id,
        findUser.lang == 'uz' ? `üá∑üá∫ Rus tilini bilish darajangiz qanday?` :  'üá∑üá∫ –ö–∞–∫–æ–π —É –≤–∞—Å —É—Ä–æ–≤–µ–Ω—å —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞?', {
        reply_markup:  {
          inline_keyboard: [
            [{
                text: "–ù–∞—á–∞–ª—å–Ω—ã–π",
                callback_data: `lang_ru::–ù–∞—á–∞–ª—å–Ω—ã–π`
              },
              {
                text: "–°—Ä–µ–¥–Ω–∏–π",
                callback_data: `lang_ru::–°—Ä–µ–¥–Ω–∏–π`
              },
            ],
            [
              {
                text: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π",
                callback_data: `lang_ru::–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π`
              },
              {
                text: "–°–≤–æ–±–æ–¥–Ω—ã–π",
                callback_data: `lang_ru::–°–≤–æ–±–æ–¥–Ω—ã–π`
              }
            ]
          ],
          one_time_keyboard: true,
          
        },
      })


    }

    if(mesage_Callback.data.split('::')[0] == 'lang_ru'){
      const users = await read('users.json')
      const findUser = users.find(e => e.id == mesage_Callback.from.id)
      findUser.lang_ru =   mesage_Callback?.data?.split('::')[1]

      await write('users.json' , users)

      await bot.sendMessage(mesage_Callback.message.chat.id,
        findUser.lang == 'uz' ? `üá∫üá∏ Ingliz tilini bilish darajangiz qanday?` : 'üá∫üá∏ –ö–∞–∫–æ–π —É –≤–∞—Å —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏—Å–∫–∏–π —è–∑—ã–∫–∞?', {
        reply_markup:  {
          inline_keyboard: [
            [{
                text: "–ù–∞—á–∞–ª—å–Ω—ã–π",
                callback_data: `lang_en::–ù–∞—á–∞–ª—å–Ω—ã–π`
              },
              {
                text: "–°—Ä–µ–¥–Ω–∏–π",
                callback_data: `lang_en::–°—Ä–µ–¥–Ω–∏–π`
              },
            ],
            [
              {
                text: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π",
                callback_data: `lang_en::–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π`
              },
              {
                text: "–°–≤–æ–±–æ–¥–Ω—ã–π",
                callback_data: `lang_en::–°–≤–æ–±–æ–¥–Ω—ã–π`
              }
            ]
          ],
          one_time_keyboard: true,
          
        },
      })


    }

    if(mesage_Callback.data.split('::')[0] == 'lang_en'){
      const users = await read('users.json')
      const findUser = users.find(e => e.id ==mesage_Callback.from.id)
      findUser.lang_en =  mesage_Callback?.data?.split('::')[1]

      await write('users.json' , users)

      bot.sendMessage(mesage_Callback.message.chat.id , `
      ${findUser.lang == 'uz' ? '<b> üíº Sizni qiziqtirgan vakansiyani tanlang?:</b>': '<b> üíº –ù–∞ –∫–∞–∫—É—é –≤–∞–∫–∞–Ω—Å–∏—é –≤—ã –ø—Ä–µ—Ç–µ–Ω–¥—É–µ—Ç–µ?:</b>' } ${findUser.job}
      ${findUser.lang == 'uz' ? '<b> To\'liq ismi sharif:</b>': '<b> –§–ò–û:</b>' } ${findUser.name}
      ${findUser.lang == 'uz' ? '<b>üìÖ Tug\'ilgan sana:</b>': '<b> üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b>' } ${findUser.wasborn}
      ${findUser.lang == 'uz' ? '<b> üì±Aloqa:</b>': '<b> üì±–ö–æ–Ω—Ç–∞–∫—Ç:</b>' } ${findUser.nomer}
      ${findUser.lang == 'uz' ? '<b> Manzil:</b>': '<b>  –ê–¥–¥—Ä–µ—Å—Å:</b>' } ${findUser.address}
      ${findUser.lang == 'uz' ? '<b> Talaba yoki yo\'q: </b>': '<b> –°—Ç—É–¥–µ–Ω—Ç –∏–ª–∏ –Ω–µ—Ç:</b>' } ${findUser.student}
      ${findUser.lang == 'uz' ? '<b> üó£ Rus tilini bilish darajasi?:</b>': '<b> üó£ –£—Ä–æ–≤–µ–Ω—å —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞?:</b>' } ${findUser.lang_ru}
      ${findUser.lang == 'uz' ? '<b> üó£O\'zbek tili darajasi:</b>': '<b> üó£–£—Ä–æ–≤–µ–Ω—å —É–∑–±–µ–∫—Å–∫–æ–≥–æ —è–∑—ã–∫–∞:</b>' } ${findUser.lang_uz}
      ${findUser.lang == 'uz' ? '<b> üó£ Ingliz tilini bilish darajasi?:</b>': '<b> üó£–£—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏—Å–∫–æ–≥–æ —è–∑—ã–∫–∞:</b>' } ${mesage_Callback.data.split('::')[1]}
      `,{parse_mode : 'HTML',
        reply_markup : {
          keyboard : [[findUser.lang == 'uz' ? 'Barcha tafsilotlarni tasdiqlash uchun "Yuborish" tugmasini bosing' : '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å", —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ']],
          one_time_keyboard :true,
          resize_keyboard:true
        }
      }
      )
    }
    
    
  })
  
  


